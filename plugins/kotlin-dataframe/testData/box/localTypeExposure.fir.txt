FILE: localTypeExposure.kt
    public final val df1: R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|(vararg(String(a))).R|org/jetbrains/kotlinx/dataframe/api/DataFrameBuilder.invoke|(vararg(Int(1))).R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Int|, R|kotlin/Any?|>(String(b), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|): R|kotlin/Int| <inline=NoInline>  {
        ^ Int(2)
    }
    )
        public get(): R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>|
    internal final val df2: R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|(vararg(String(a))).R|org/jetbrains/kotlinx/dataframe/api/DataFrameBuilder.invoke|(vararg(Int(1))).R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Int|, R|kotlin/Any?|>(String(b), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|): R|kotlin/Int| <inline=NoInline>  {
        ^ Int(2)
    }
    )
        internal get(): R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>|
    private final val df3: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Add_78>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|(vararg(String(a))).R|org/jetbrains/kotlinx/dataframe/api/DataFrameBuilder.invoke|(vararg(Int(1))).R|kotlin/let|<R|{org/jetbrains/kotlinx/dataframe/AnyFrame=} org/jetbrains/kotlinx/dataframe/DataFrame<*>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Add_78>|>(<L> = fun <anonymous>(it: R|{org/jetbrains/kotlinx/dataframe/AnyFrame=} org/jetbrains/kotlinx/dataframe/DataFrame<*>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Add_78>| <inline=Inline, kind=EXACTLY_ONCE>  {
        local abstract class Add_78I : R|kotlin/Any| {
            @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val b: R|kotlin/Int|
                public get(): R|kotlin/Int|

            public constructor(): R|<local>/Add_78I|

        }

        local final class Scope0 : R|kotlin/Any| {
            public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Add_78I>|.b: R|kotlin/Int|
                public get(): R|kotlin/Int|

            public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Add_78I>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

            public constructor(): R|<local>/Scope0|

        }

        local abstract class Add_78 : R|<local>/Add_78I| {
            public abstract var scope0: R|<local>/Scope0|
                public get(): R|<local>/Scope0|
                public set(value: R|<local>/Scope0|): R|kotlin/Unit|

            public constructor(): R|<local>/Add_78|

        }

        ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Int|, R|kotlin/Any?|>(String(b), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|): R|kotlin/Int| <inline=NoInline>  {
            ^ Int(2)
        }
        )
    }
    )
        private get(): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Add_78>|
    public final class Container : R|kotlin/Any| {
        public constructor(): R|Container| {
            super<R|kotlin/Any|>()
        }

        public final val df1: R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|(vararg(String(a))).R|org/jetbrains/kotlinx/dataframe/api/DataFrameBuilder.invoke|(vararg(Int(1))).R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Int|, R|kotlin/Any?|>(String(b), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|): R|kotlin/Int| <inline=NoInline>  {
            ^ Int(2)
        }
        )
            public get(): R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>|

        internal final val df2: R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|(vararg(String(a))).R|org/jetbrains/kotlinx/dataframe/api/DataFrameBuilder.invoke|(vararg(Int(1))).R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Int|, R|kotlin/Any?|>(String(b), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|): R|kotlin/Int| <inline=NoInline>  {
            ^ Int(2)
        }
        )
            internal get(): R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>|

        protected final val df3: R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|(vararg(String(a))).R|org/jetbrains/kotlinx/dataframe/api/DataFrameBuilder.invoke|(vararg(Int(1))).R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Int|, R|kotlin/Any?|>(String(b), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|): R|kotlin/Int| <inline=NoInline>  {
            ^ Int(2)
        }
        )
            protected get(): R|org/jetbrains/kotlinx/dataframe/DataFrame<kotlin/Any?>|

        private final val df4: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Add_78>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|(vararg(String(a))).R|org/jetbrains/kotlinx/dataframe/api/DataFrameBuilder.invoke|(vararg(Int(1))).R|kotlin/let|<R|{org/jetbrains/kotlinx/dataframe/AnyFrame=} org/jetbrains/kotlinx/dataframe/DataFrame<*>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Add_78>|>(<L> = fun <anonymous>(it: R|{org/jetbrains/kotlinx/dataframe/AnyFrame=} org/jetbrains/kotlinx/dataframe/DataFrame<*>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Add_78>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Add_78I : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public constructor(): R|<local>/Add_78I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Add_78I>|.b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Add_78I>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Add_78 : R|<local>/Add_78I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public constructor(): R|<local>/Add_78|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Int|, R|kotlin/Any?|>(String(b), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<kotlin/Any?>|): R|kotlin/Int| <inline=NoInline>  {
                ^ Int(2)
            }
            )
        }
        )
            private get(): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Add_78>|

    }
    public final fun box(): R|kotlin/String| {
        ^box String(OK)
    }
