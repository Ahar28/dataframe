FILE: rename.kt
    public final data class Nested : R|kotlin/Any| {
        public constructor(d: R|kotlin/Double|): R|Nested| {
            super<R|kotlin/Any|>()
        }

        public final val d: R|kotlin/Double| = R|<local>/d|
            public get(): R|kotlin/Double|

        public final operator fun component1(): R|kotlin/Double|

        public final fun copy(d: R|kotlin/Double| = this@R|/Nested|.R|/Nested.d|): R|Nested|

    }
    public final data class Record : R|kotlin/Any| {
        public constructor(a: R|kotlin/String|, b: R|kotlin/Int|, nested: R|Nested|): R|Record| {
            super<R|kotlin/Any|>()
        }

        public final val a: R|kotlin/String| = R|<local>/a|
            public get(): R|kotlin/String|

        public final val b: R|kotlin/Int| = R|<local>/b|
            public get(): R|kotlin/Int|

        public final val nested: R|Nested| = R|<local>/nested|
            public get(): R|Nested|

        public final operator fun component1(): R|kotlin/String|

        public final operator fun component2(): R|kotlin/Int|

        public final operator fun component3(): R|Nested|

        public final fun copy(a: R|kotlin/String| = this@R|/Record|.R|/Record.a|, b: R|kotlin/Int| = this@R|/Record|.R|/Record.b|, nested: R|Nested| = this@R|/Record|.R|/Record.nested|): R|Record|

    }
    public final fun box(): R|kotlin/String| {
        lval df: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>| = R|kotlin/collections/listOf|<R|Record|>(R|/Record.Record|(String(112), Int(42), R|/Nested.Nested|(Double(3.0)))).R|kotlin/let|<R|kotlin/collections/List<Record>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>|>(<L> = fun <anonymous>(it: R|kotlin/collections/List<Record>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Record_33I : R|kotlin/Any| {
                public abstract val nested: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|

                public abstract val b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public abstract val a: R|kotlin/String|
                    public get(): R|kotlin/String|

                public constructor(): R|<local>/Record_33I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_33I>|.nested: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_33I>|.nested: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Nested_101>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Nested_101>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_33I>|.b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_33I>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_33I>|.a: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_33I>|.a: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Nested_101 : R|kotlin/Any| {
                public abstract val d: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public constructor(): R|<local>/Nested_101|

            }

            local final class Scope1 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|.d: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Nested_101>|.d: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|

                public constructor(): R|<local>/Scope1|

            }

            local abstract class Record_33 : R|<local>/Record_33I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public abstract var scope1: R|<local>/Scope1|
                    public get(): R|<local>/Scope1|
                    public set(value: R|<local>/Scope1|): R|kotlin/Unit|

                public constructor(): R|<local>/Record_33|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/toDataFrame|<R|Record|>(Int(1))
        }
        )
        lval df1: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_97>| = R|<local>/df|.R|org/jetbrains/kotlinx/dataframe/api/rename|<R|<local>/Record_33|, R|kotlin/Double|>(<L> = rename@fun R|org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Record_33>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Record_33>|): R|org/jetbrains/kotlinx/dataframe/columns/ColumnsResolver<kotlin/Double>| <inline=NoInline>  {
            ^ (this@R|/box|, (this@R|/box|, this@R|special/anonymous|).R|<local>/Scope0.nested|).R|<local>/Scope1.d|
        }
        ).R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/api/RenameClause<<local>/Record_33, kotlin/Double>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_97>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/api/RenameClause<<local>/Record_33, kotlin/Double>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_97>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Into_97I : R|kotlin/Any| {
                public abstract val nested: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_731>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_731>|

                public abstract val b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public abstract val a: R|kotlin/String|
                    public get(): R|kotlin/String|

                public constructor(): R|<local>/Into_97I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_97I>|.nested: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_731>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_731>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_97I>|.nested: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Nested_731>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Nested_731>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_97I>|.b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_97I>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_97I>|.a: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_97I>|.a: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Nested_731 : R|kotlin/Any| {
                public abstract val newName: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public constructor(): R|<local>/Nested_731|

            }

            local final class Scope1 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_731>|.newName: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Nested_731>|.newName: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|

                public constructor(): R|<local>/Scope1|

            }

            local abstract class Into_97 : R|<local>/Into_97I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public abstract var scope1: R|<local>/Scope1|
                    public get(): R|<local>/Scope1|
                    public set(value: R|<local>/Scope1|): R|kotlin/Unit|

                public constructor(): R|<local>/Into_97|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/into|<R|<local>/Record_33|, R|kotlin/Double|>(vararg(String(newName)))
        }
        )
        (this@R|/box|, (this@R|/box|, R|<local>/df1|).R|<local>/Scope0.nested|).R|<local>/Scope1.newName|
        lval df2: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_65>| = R|<local>/df|.R|org/jetbrains/kotlinx/dataframe/api/rename|<R|<local>/Record_33|, R|kotlin/Any|>(<L> = rename@fun R|org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Record_33>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Record_33>|): R|org/jetbrains/kotlinx/dataframe/columns/ColumnsResolver<kotlin/Any>| <inline=NoInline>  {
            ^ (this@R|special/anonymous|, (this@R|/box|, (this@R|/box|, this@R|special/anonymous|).R|<local>/Scope0.nested|).R|<local>/Scope1.d|).R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl.and: R|org/jetbrains/kotlinx/dataframe/columns/ColumnSet<C>|>|<R|kotlin/Any|>((this@R|/box|, this@R|special/anonymous|).R|<local>/Scope0.nested|)
        }
        ).R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/api/RenameClause<<local>/Record_33, kotlin/Any>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_65>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/api/RenameClause<<local>/Record_33, kotlin/Any>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_65>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Into_65I : R|kotlin/Any| {
                public abstract val first: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/First_271>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/First_271>|

                public abstract val b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public abstract val a: R|kotlin/String|
                    public get(): R|kotlin/String|

                public constructor(): R|<local>/Into_65I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_65I>|.first: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/First_271>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/First_271>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_65I>|.first: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/First_271>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/First_271>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_65I>|.b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_65I>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_65I>|.a: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_65I>|.a: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class First_271 : R|kotlin/Any| {
                public abstract val second: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public constructor(): R|<local>/First_271|

            }

            local final class Scope1 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/First_271>|.second: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/First_271>|.second: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|

                public constructor(): R|<local>/Scope1|

            }

            local abstract class Into_65 : R|<local>/Into_65I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public abstract var scope1: R|<local>/Scope1|
                    public get(): R|<local>/Scope1|
                    public set(value: R|<local>/Scope1|): R|kotlin/Unit|

                public constructor(): R|<local>/Into_65|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/into|<R|<local>/Record_33|, R|kotlin/Any|>(vararg(String(first), String(second)))
        }
        )
        (this@R|/box|, (this@R|/box|, R|<local>/df2|).R|<local>/Scope0.first|).R|<local>/Scope1.second|
        ^box String(OK)
    }
