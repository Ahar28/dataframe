FILE: flexibleReturnType.kt
    package org.jetbrains.kotlinx.dataframe

    @R|org/jetbrains/kotlinx/dataframe/annotations/DataSchema|() public abstract interface ActivePlayer : R|kotlin/Any| {
        public abstract val char: R|kotlin/Int|
            public get(): R|kotlin/Int|

        public abstract val timestamp: R|kotlin/String|
            public get(): R|kotlin/String|

    }
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/experimental/ExperimentalTypeInference|))) @R|kotlin/OverloadResolutionByLambdaReturnType|() public final fun <T, V : R|java/time/temporal/Temporal|> R|org/jetbrains/kotlinx/dataframe/DataRow<T>|.diff(unit: R|java/time/temporal/ChronoUnit|, expression: R|org/jetbrains/kotlinx/dataframe/RowExpression<T, V>|): R|kotlin/Long?| {
        ^diff this@R|org/jetbrains/kotlinx/dataframe/diff|.R|org/jetbrains/kotlinx/dataframe/api/prev|<R|T|>()?.{ $subj$.R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataRow<T>|, R|kotlin/Long|>(<L> = let@fun <anonymous>(p: R|org/jetbrains/kotlinx/dataframe/DataRow<T>|): R|kotlin/Long| <inline=Inline, kind=EXACTLY_ONCE>  {
            ^ R|<local>/unit|.R|java/time/temporal/ChronoUnit.between|(R|<local>/expression|.R|SubstitutionOverride<kotlin/Function2.invoke: R|V|>|(this@R|org/jetbrains/kotlinx/dataframe/diff|, this@R|org/jetbrains/kotlinx/dataframe/diff|), R|<local>/expression|.R|SubstitutionOverride<kotlin/Function2.invoke: R|V|>|(R|<local>/p|, R|<local>/p|))
        }
        ) }
    }
    public final fun box(): R|kotlin/String| {
        lval df: R|org/jetbrains/kotlinx/dataframe/DataFrame<*>| = @R|org/jetbrains/kotlinx/dataframe/annotations/DisableInterpretation|() Q|org/jetbrains/kotlinx/dataframe/DataFrame|.R|org/jetbrains/kotlinx/dataframe/io/readDelimStr|(String(
        char,level,race,charclass,zone,guild,timestamp
        59425,1,Orc,Rogue,Orgrimmar,165,01/01/08 00:02:04
        65494,9,Orc,Hunter,Durotar,-1,01/01/08 00:02:04
    ).R|kotlin/text/trimIndent|())
        lval df1: R|org/jetbrains/kotlinx/dataframe/DataFrame<org/jetbrains/kotlinx/dataframe/ActivePlayer>| = R|<local>/df|.R|org/jetbrains/kotlinx/dataframe/api/cast|<R|org/jetbrains/kotlinx/dataframe/ActivePlayer|>()
        lval format: R|java/time/format/DateTimeFormatter!| = Q|java/time/format/DateTimeFormatter|.R|java/time/format/DateTimeFormatter.ofPattern*s|(String(MM/dd/yy HH:mm:ss))
        lval df2: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/TokenWith_862661939>| = R|<local>/df1|.R|org/jetbrains/kotlinx/dataframe/api/convert|<R|org/jetbrains/kotlinx/dataframe/ActivePlayer|, R|kotlin/String|>(<L> = convert@fun R|org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<org/jetbrains/kotlinx/dataframe/ActivePlayer>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<org/jetbrains/kotlinx/dataframe/ActivePlayer>|): R|org/jetbrains/kotlinx/dataframe/columns/ColumnsResolver<kotlin/String>| <inline=NoInline>  {
            ^ this@R|special/anonymous|.R|org/jetbrains/kotlinx/dataframe/timestamp|
        }
        ).R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/api/Convert<org/jetbrains/kotlinx/dataframe/ActivePlayer, kotlin/String>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/TokenWith_113141796>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/api/Convert<org/jetbrains/kotlinx/dataframe/ActivePlayer, kotlin/String>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/TokenWith_113141796>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class TokenWith_113141796I : R|kotlin/Any| {
                public abstract val timestamp: R|java/time/LocalDateTime|
                    public get(): R|java/time/LocalDateTime|

                public abstract val char: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public constructor(): R|<local>/TokenWith_113141796I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/TokenWith_113141796I>|.timestamp: R|java/time/LocalDateTime|
                    public get(): R|java/time/LocalDateTime|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/TokenWith_113141796I>|.timestamp: R|org/jetbrains/kotlinx/dataframe/DataColumn<java/time/LocalDateTime>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<java/time/LocalDateTime>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/TokenWith_113141796I>|.char: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/TokenWith_113141796I>|.char: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class TokenWith_113141796 : R|<local>/TokenWith_113141796I| {
                public abstract val scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|

                public constructor(): R|<local>/TokenWith_113141796|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/with|<R|org/jetbrains/kotlinx/dataframe/ActivePlayer|, R|kotlin/String|, R|java/time/LocalDateTime|>(<L> = with@fun R|org/jetbrains/kotlinx/dataframe/DataRow<org/jetbrains/kotlinx/dataframe/ActivePlayer>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  kotlin/String|): R|java/time/LocalDateTime| <inline=NoInline>  {
                ^ Q|java/time/LocalDateTime|.R|java/time/LocalDateTime.parse*s|(R|<local>/it|, R|<local>/format|)!!
            }
            )
        }
        ).R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/TokenWith_113141796>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/TokenWith_862661939>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/TokenWith_113141796>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/TokenWith_862661939>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class TokenWith_862661939I : R|kotlin/Any| {
                public abstract val timestamp: R|java/time/LocalDateTime|
                    public get(): R|java/time/LocalDateTime|

                public abstract val tsDiff: R|kotlin/Boolean|
                    public get(): R|kotlin/Boolean|

                public abstract val char: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public constructor(): R|<local>/TokenWith_862661939I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/TokenWith_862661939I>|.timestamp: R|java/time/LocalDateTime|
                    public get(): R|java/time/LocalDateTime|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/TokenWith_862661939I>|.timestamp: R|org/jetbrains/kotlinx/dataframe/DataColumn<java/time/LocalDateTime>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<java/time/LocalDateTime>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/TokenWith_862661939I>|.tsDiff: R|kotlin/Boolean|
                    public get(): R|kotlin/Boolean|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/TokenWith_862661939I>|.tsDiff: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Boolean>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Boolean>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/TokenWith_862661939I>|.char: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/TokenWith_862661939I>|.char: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class TokenWith_862661939 : R|<local>/TokenWith_862661939I| {
                public abstract val scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|

                public constructor(): R|<local>/TokenWith_862661939|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Boolean|, R|<local>/TokenWith_113141796|>(String(tsDiff), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<<local>/TokenWith_113141796>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<<local>/TokenWith_113141796>|): R|kotlin/Boolean| <inline=NoInline>  {
                ^ this@R|special/anonymous|.R|org/jetbrains/kotlinx/dataframe/diff|<R|<local>/TokenWith_113141796|, R|java/time/LocalDateTime|>(Q|java/time/temporal/ChronoUnit|.R|java/time/temporal/ChronoUnit.MINUTES|, <L> = diff@fun R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/TokenWith_113141796>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/DataRow<<local>/TokenWith_113141796>|): R|java/time/LocalDateTime| <inline=NoInline>  {
                    ^ (this@R|org/jetbrains/kotlinx/dataframe/box|, this@R|special/anonymous|).R|<local>/Scope0.timestamp|
                }
                )?.{ $subj$.R|kotlin/let|<R|kotlin/Long|, R|kotlin/Boolean|>(<L> = let@fun <anonymous>(it: R|kotlin/Long|): R|kotlin/Boolean| <inline=Inline, kind=EXACTLY_ONCE>  {
                    ^ CMP(>, R|<local>/it|.R|kotlin/Long.compareTo|(Int(20)))
                }
                ) } ?: Boolean(true)
            }
            )
        }
        )
        R|<local>/df2|.R|org/jetbrains/kotlinx/dataframe/api/print|<R|<local>/TokenWith_862661939|>()
        ^box String(OK)
    }
FILE: __GENERATED DECLARATIONS__.kt
    package org.jetbrains.kotlinx.dataframe

    public final val R|org/jetbrains/kotlinx/dataframe/DataRow<org/jetbrains/kotlinx/dataframe/ActivePlayer>|.char: R|kotlin/Int|
        public get(): R|kotlin/Int|
    public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<org/jetbrains/kotlinx/dataframe/ActivePlayer>|.char: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
        public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
    public final val R|org/jetbrains/kotlinx/dataframe/DataRow<org/jetbrains/kotlinx/dataframe/ActivePlayer>|.timestamp: R|kotlin/String|
        public get(): R|kotlin/String|
    public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<org/jetbrains/kotlinx/dataframe/ActivePlayer>|.timestamp: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
        public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
