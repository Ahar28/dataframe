FILE: extractDataSchemaWithTypeParameter.kt
    @R|org/jetbrains/kotlinx/dataframe/annotations/DataSchema|() public final data class Record : R|kotlin/Any|, R|org/jetbrains/kotlinx/dataframe/api/DataRowSchema| {
        public constructor(id: R|kotlin/String|, b: R|kotlin/Int|): R|Record| {
            super<R|kotlin/Any|>()
        }

        public final val id: R|kotlin/String| = R|<local>/id|
            public get(): R|kotlin/String|

        public final val b: R|kotlin/Int| = R|<local>/b|
            public get(): R|kotlin/Int|

        public final operator fun component1(): R|kotlin/String|

        public final operator fun component2(): R|kotlin/Int|

        public final fun copy(id: R|kotlin/String| = this@R|/Record|.R|/Record.id|, b: R|kotlin/Int| = this@R|/Record|.R|/Record.b|): R|Record|

    }
    public final fun box(): R|kotlin/String| {
        lval df: R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|<R|Record|>(vararg(R|/Record.Record|(String(1), Int(1)), R|/Record.Record|(String(2), Int(123)), R|/Record.Record|(String(3), Int(321))))
        lval df1: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/ValueProperty_74>| = R|kotlin/collections/listOf|<R|kotlin/String|>(vararg(String(1), String(2), String(3))).R|org/jetbrains/kotlinx/dataframe/api/toDataFrame|<R|kotlin/String|>().R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataFrame<org/jetbrains/kotlinx/dataframe/api/ValueProperty<kotlin/String>>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/ValueProperty_74>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataFrame<org/jetbrains/kotlinx/dataframe/api/ValueProperty<kotlin/String>>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/ValueProperty_74>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class ValueProperty_74I : R|kotlin/Any| {
                public abstract val value: R|kotlin/String|
                    public get(): R|kotlin/String|

                public abstract val b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public constructor(): R|<local>/ValueProperty_74I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/ValueProperty_74I>|.value: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/ValueProperty_74I>|.value: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/ValueProperty_74I>|.b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/ValueProperty_74I>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class ValueProperty_74 : R|<local>/ValueProperty_74I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public constructor(): R|<local>/ValueProperty_74|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/join|<R|org/jetbrains/kotlinx/dataframe/api/ValueProperty<kotlin/String>|, R|Record|>(R|<local>/df|, <L> = join@fun R|org/jetbrains/kotlinx/dataframe/api/JoinDsl<org/jetbrains/kotlinx/dataframe/api/ValueProperty<kotlin/String>, Record>|.<anonymous>(it: R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<org/jetbrains/kotlinx/dataframe/api/ValueProperty<kotlin/String>>|): R|org/jetbrains/kotlinx/dataframe/columns/ColumnsResolver<*>| <inline=NoInline>  {
                ^ (this@R|special/anonymous|, this@R|special/anonymous|.R|org/jetbrains/kotlinx/dataframe/api/value|<R|kotlin/String|>).R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/api/JoinDsl.match: R|org/jetbrains/kotlinx/dataframe/api/ColumnMatch<C>|>|<R|kotlin/String|>(this@R|special/anonymous|.R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/api/JoinDsl.right: R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>|>|.R|/id|)
            }
            )
        }
        )
        lval col: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>| = (this@R|/box|, R|<local>/df1|).R|<local>/Scope0.value|
        ^box String(OK)
    }
FILE: __GENERATED DECLARATIONS__.kt
    public final val R|org/jetbrains/kotlinx/dataframe/DataRow<Record>|.id: R|kotlin/String|
        public get(): R|kotlin/String|
    public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<Record>|.id: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
        public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
    public final val R|org/jetbrains/kotlinx/dataframe/DataRow<Record>|.b: R|kotlin/Int|
        public get(): R|kotlin/Int|
    public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<Record>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
        public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
