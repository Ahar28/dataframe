FILE: dropNulls.kt
    public final data class Nested : R|kotlin/Any| {
        public constructor(i: R|kotlin/Double?|): R|Nested| {
            super<R|kotlin/Any|>()
        }

        public final val i: R|kotlin/Double?| = R|<local>/i|
            public get(): R|kotlin/Double?|

        public final operator fun component1(): R|kotlin/Double?|

        public final fun copy(i: R|kotlin/Double?| = this@R|/Nested|.R|/Nested.i|): R|Nested|

    }
    public final data class Record : R|kotlin/Any| {
        public constructor(a: R|kotlin/String?|, b: R|kotlin/Int?|, nested: R|Nested|): R|Record| {
            super<R|kotlin/Any|>()
        }

        public final val a: R|kotlin/String?| = R|<local>/a|
            public get(): R|kotlin/String?|

        public final val b: R|kotlin/Int?| = R|<local>/b|
            public get(): R|kotlin/Int?|

        public final val nested: R|Nested| = R|<local>/nested|
            public get(): R|Nested|

        public final operator fun component1(): R|kotlin/String?|

        public final operator fun component2(): R|kotlin/Int?|

        public final operator fun component3(): R|Nested|

        public final fun copy(a: R|kotlin/String?| = this@R|/Record|.R|/Record.a|, b: R|kotlin/Int?| = this@R|/Record|.R|/Record.b|, nested: R|Nested| = this@R|/Record|.R|/Record.nested|): R|Record|

    }
    public final fun box(): R|kotlin/String| {
        lval df: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>| = R|kotlin/collections/listOf|<R|Record|>(R|/Record.Record|(String(112), Int(42), R|/Nested.Nested|(Double(3.0)))).R|kotlin/let|<R|kotlin/collections/List<Record>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>|>(<L> = fun <anonymous>(it: R|kotlin/collections/List<Record>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Record_33I : R|kotlin/Any| {
                public abstract val nested: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|

                public abstract val b: R|kotlin/Int?|
                    public get(): R|kotlin/Int?|

                public abstract val a: R|kotlin/String?|
                    public get(): R|kotlin/String?|

                public constructor(): R|<local>/Record_33I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_33I>|.nested: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_33I>|.nested: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Nested_101>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Nested_101>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_33I>|.b: R|kotlin/Int?|
                    public get(): R|kotlin/Int?|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_33I>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int?>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int?>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_33I>|.a: R|kotlin/String?|
                    public get(): R|kotlin/String?|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_33I>|.a: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String?>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String?>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Nested_101 : R|kotlin/Any| {
                public abstract val i: R|kotlin/Double?|
                    public get(): R|kotlin/Double?|

                public constructor(): R|<local>/Nested_101|

            }

            local final class Scope1 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_101>|.i: R|kotlin/Double?|
                    public get(): R|kotlin/Double?|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Nested_101>|.i: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double?>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double?>|

                public constructor(): R|<local>/Scope1|

            }

            local abstract class Record_33 : R|<local>/Record_33I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public abstract var scope1: R|<local>/Scope1|
                    public get(): R|<local>/Scope1|
                    public set(value: R|<local>/Scope1|): R|kotlin/Unit|

                public constructor(): R|<local>/Record_33|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/toDataFrame|<R|Record|>(Int(1))
        }
        )
        R|<local>/df|.R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_18>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_18>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Record_18I : R|kotlin/Any| {
                public abstract val nested: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_381>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_381>|

                public abstract val b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public abstract val a: R|kotlin/String|
                    public get(): R|kotlin/String|

                public constructor(): R|<local>/Record_18I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_18I>|.nested: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_381>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_381>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_18I>|.nested: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Nested_381>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Nested_381>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_18I>|.b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_18I>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_18I>|.a: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_18I>|.a: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Nested_381 : R|kotlin/Any| {
                public abstract val i: R|kotlin/Double?|
                    public get(): R|kotlin/Double?|

                public constructor(): R|<local>/Nested_381|

            }

            local final class Scope1 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Nested_381>|.i: R|kotlin/Double?|
                    public get(): R|kotlin/Double?|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Nested_381>|.i: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double?>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double?>|

                public constructor(): R|<local>/Scope1|

            }

            local abstract class Record_18 : R|<local>/Record_18I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public abstract var scope1: R|<local>/Scope1|
                    public get(): R|<local>/Scope1|
                    public set(value: R|<local>/Scope1|): R|kotlin/Unit|

                public constructor(): R|<local>/Record_18|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/dropNulls|<R|<local>/Record_33|>(<L> = dropNulls@fun R|org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Record_33>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Record_33>|): R|org/jetbrains/kotlinx/dataframe/columns/ColumnsResolver<*>| <inline=NoInline>  {
                ^ (this@R|special/anonymous|, (this@R|/box|, this@R|special/anonymous|).R|<local>/Scope0.a|).R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl.and: R|org/jetbrains/kotlinx/dataframe/columns/ColumnSet<C>|>|<R|it(kotlin/Comparable<*>? & java/io/Serializable?)|>((this@R|/box|, this@R|special/anonymous|).R|<local>/Scope0.b|)
            }
            )
        }
        )
        ^box String(OK)
    }
