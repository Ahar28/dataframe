FILE: add.kt
    public final inline fun <reified T> runtimeSchema(row: R|org/jetbrains/kotlinx/dataframe/DataRow<T>|): R|kotlin/collections/Map<kotlin/String, kotlin/reflect/KProperty1<out kotlin/Any, *>>| {
        ^runtimeSchema (R|kotlin/reflect/typeOf|<R|T|>().R|kotlin/reflect/KType.classifier| as R|kotlin/reflect/KClass<*>|).R|kotlin/reflect/full/memberProperties|<R|CapturedType(*)|>.R|kotlin/collections/associateBy|<R|kotlin/reflect/KProperty1<out kotlin/Any, *>|, R|kotlin/String|>(<L> = associateBy@fun <anonymous>(it: R|kotlin/reflect/KProperty1<out kotlin/Any, *>|): R|kotlin/String| <inline=Inline, kind=UNKNOWN>  {
            ^ R|<local>/it|.R|SubstitutionOverride<kotlin/reflect/KProperty1.name: R|kotlin/String|>|
        }
        )
    }
    public final inline fun <reified T> runtimeSchema(row: R|org/jetbrains/kotlinx/dataframe/DataFrame<T>|): R|kotlin/collections/Map<kotlin/String, kotlin/reflect/KProperty1<out kotlin/Any, *>>| {
        ^runtimeSchema (R|kotlin/reflect/typeOf|<R|T|>().R|kotlin/reflect/KType.classifier| as R|kotlin/reflect/KClass<*>|).R|kotlin/reflect/full/memberProperties|<R|CapturedType(*)|>.R|kotlin/collections/associateBy|<R|kotlin/reflect/KProperty1<out kotlin/Any, *>|, R|kotlin/String|>(<L> = associateBy@fun <anonymous>(it: R|kotlin/reflect/KProperty1<out kotlin/Any, *>|): R|kotlin/String| <inline=Inline, kind=UNKNOWN>  {
            ^ R|<local>/it|.R|SubstitutionOverride<kotlin/reflect/KProperty1.name: R|kotlin/String|>|
        }
        )
    }
    public final fun <T> R|kotlin/collections/Map<kotlin/String, T>|.col(s: R|kotlin/String|): R|T? & Any| {
        ^col this@R|/col|.R|SubstitutionOverride<kotlin/collections/Map.get: R|T?|>|(R|<local>/s|)!!
    }
    @R|org/jetbrains/kotlinx/dataframe/annotations/DataSchema|() public final class Record : R|kotlin/Any|, R|org/jetbrains/kotlinx/dataframe/api/DataRowSchema| {
        public constructor(string: R|kotlin/String|): R|Record| {
            super<R|kotlin/Any|>()
        }

        public final val string: R|kotlin/String| = R|<local>/string|
            public get(): R|kotlin/String|

    }
    public final fun box(): R|kotlin/String| {
        lval df: R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|<R|Record|>(vararg(R|/Record.Record|(String(abc))))
        lval df1: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_56>| = R|<local>/df|.R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_56>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_56>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Record_56I : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val row: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_081>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_081>|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public constructor(): R|<local>/Record_56I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_56I>|.row: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_081>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_081>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_56I>|.row: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Row_081>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Row_081>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_56I>|.string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_56I>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Row_081 : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val string: R|kotlin/String?|
                    public get(): R|kotlin/String?|

                public constructor(): R|<local>/Row_081|

            }

            local final class Scope1 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_081>|.string: R|kotlin/String?|
                    public get(): R|kotlin/String?|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Row_081>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String?>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String?>|

                public constructor(): R|<local>/Scope1|

            }

            local abstract class Record_56 : R|<local>/Record_56I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public abstract var scope1: R|<local>/Scope1|
                    public get(): R|<local>/Scope1|
                    public set(value: R|<local>/Scope1|): R|kotlin/Unit|

                public constructor(): R|<local>/Record_56|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/add|<R|org/jetbrains/kotlinx/dataframe/DataRow<Record>?|, R|Record|>(String(row), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<Record>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<Record>|): R|org/jetbrains/kotlinx/dataframe/DataRow<Record>?| <inline=NoInline>  {
                lval row: R|org/jetbrains/kotlinx/dataframe/DataRow<Record>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|<R|Record|>(vararg(R|/Record.Record|(String()))).R|org/jetbrains/kotlinx/dataframe/api/first|<R|Record|>()
                ^ R|<local>/row|.R|kotlin/takeIf|<R|org/jetbrains/kotlinx/dataframe/DataRow<Record>|>(<L> = takeIf@fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataRow<Record>|): R|kotlin/Boolean| <inline=Inline, kind=EXACTLY_ONCE>  {
                    ^ ==(this@R|special/anonymous|.R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/api/AddDataRow.index: R|kotlin/Int|>|().R|kotlin/Int.rem|(Int(2)), Int(0))
                }
                )
            }
            )
        }
        )
        R|kotlin/require|(==(R|/runtimeSchema|<R|<local>/Row_081|>((this@R|/box|, R|<local>/df1|).R|<local>/Scope0.row|.R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/columns/ColumnGroup.get: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_081>|>|(Int(0))).R|/col|<R|kotlin/reflect/KProperty1<out kotlin/Any, *>|>(String(string)).R|SubstitutionOverride<kotlin/reflect/KProperty1.returnType: R|kotlin/reflect/KType|>|, R|kotlin/reflect/typeOf|<R|kotlin/String?|>()))
        lval row: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_43>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|<R|Record|>(vararg(R|/Record.Record|(String()))).R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_95>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_95>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Record_95I : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public constructor(): R|<local>/Record_95I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_95I>|.int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_95I>|.int: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_95I>|.string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_95I>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Record_95 : R|<local>/Record_95I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public constructor(): R|<local>/Record_95|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Int|, R|Record|>(String(int), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<Record>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<Record>|): R|kotlin/Int| <inline=NoInline>  {
                ^ Int(1)
            }
            )
        }
        ).R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_95>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_95>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Record_33I : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(2)) public abstract val double: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public constructor(): R|<local>/Record_33I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_33I>|.int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_33I>|.int: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_33I>|.double: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_33I>|.double: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_33I>|.string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_33I>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Record_33 : R|<local>/Record_33I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public constructor(): R|<local>/Record_33|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Double|, R|<local>/Record_95|>(String(double), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<<local>/Record_95>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<<local>/Record_95>|): R|kotlin/Double| <inline=NoInline>  {
                ^ Double(3.0)
            }
            )
        }
        ).R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_67>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_33>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_67>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Record_67I : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(2)) public abstract val double: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val string: R|kotlin/String|
                    public get(): R|kotlin/String|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(3)) public abstract val char: R|kotlin/Char|
                    public get(): R|kotlin/Char|

                public constructor(): R|<local>/Record_67I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_67I>|.int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_67I>|.int: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_67I>|.double: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_67I>|.double: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_67I>|.string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_67I>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_67I>|.char: R|kotlin/Char|
                    public get(): R|kotlin/Char|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_67I>|.char: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Char>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Char>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Record_67 : R|<local>/Record_67I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public constructor(): R|<local>/Record_67|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/add|<R|kotlin/Char|, R|<local>/Record_33|>(String(char), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<<local>/Record_33>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<<local>/Record_33>|): R|kotlin/Char| <inline=NoInline>  {
                ^ Char(c)
            }
            )
        }
        ).R|org/jetbrains/kotlinx/dataframe/api/group|<R|<local>/Record_67|, R|it(kotlin/Number & kotlin/Comparable<*>)|>(<L> = group@fun R|org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Record_67>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Record_67>|): R|org/jetbrains/kotlinx/dataframe/columns/ColumnsResolver<it(kotlin/Number & kotlin/Comparable<*>)>| <inline=NoInline>  {
            ^ (this@R|special/anonymous|, (this@R|/box|, this@R|special/anonymous|).R|<local>/Scope0.int|).R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl.and: R|org/jetbrains/kotlinx/dataframe/columns/ColumnSet<C>|>|<R|it(kotlin/Number & kotlin/Comparable<*>)|>((this@R|/box|, this@R|special/anonymous|).R|<local>/Scope0.double|)
        }
        ).R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/api/GroupClause<<local>/Record_67, it(kotlin/Number & kotlin/Comparable<*>)>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_53>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/api/GroupClause<<local>/Record_67, it(kotlin/Number & kotlin/Comparable<*>)>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_53>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Into_53I : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val string: R|kotlin/String|
                    public get(): R|kotlin/String|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val char: R|kotlin/Char|
                    public get(): R|kotlin/Char|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(2)) public abstract val g: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_421>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_421>|

                public constructor(): R|<local>/Into_53I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_53I>|.string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_53I>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_53I>|.char: R|kotlin/Char|
                    public get(): R|kotlin/Char|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_53I>|.char: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Char>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Char>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_53I>|.g: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_421>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_421>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_53I>|.g: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/G_421>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/G_421>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class G_421 : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val double: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public constructor(): R|<local>/G_421|

            }

            local final class Scope1 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_421>|.int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/G_421>|.int: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_421>|.double: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/G_421>|.double: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|

                public constructor(): R|<local>/Scope1|

            }

            local abstract class Into_53 : R|<local>/Into_53I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public abstract var scope1: R|<local>/Scope1|
                    public get(): R|<local>/Scope1|
                    public set(value: R|<local>/Scope1|): R|kotlin/Unit|

                public constructor(): R|<local>/Into_53|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/into|<R|<local>/Record_67|, R|it(kotlin/Number & kotlin/Comparable<*>)|>(String(g))
        }
        ).R|org/jetbrains/kotlinx/dataframe/api/group|<R|<local>/Into_53|, R|kotlin/Any|>(<L> = group@fun R|org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Into_53>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<<local>/Into_53>|): R|org/jetbrains/kotlinx/dataframe/columns/ColumnsResolver<kotlin/Any>| <inline=NoInline>  {
            ^ (this@R|special/anonymous|, (this@R|/box|, this@R|special/anonymous|).R|<local>/Scope0.g|).R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl.and: R|org/jetbrains/kotlinx/dataframe/columns/ColumnSet<C>|>|<R|kotlin/Any|>((this@R|/box|, this@R|special/anonymous|).R|<local>/Scope0.char|)
        }
        ).R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/api/GroupClause<<local>/Into_53, kotlin/Any>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_43>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/api/GroupClause<<local>/Into_53, kotlin/Any>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Into_43>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Into_43I : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val string: R|kotlin/String|
                    public get(): R|kotlin/String|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val f: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_671>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_671>|

                public constructor(): R|<local>/Into_43I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_43I>|.string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_43I>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_43I>|.f: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_671>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_671>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Into_43I>|.f: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/F_671>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/F_671>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class F_671 : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val char: R|kotlin/Char|
                    public get(): R|kotlin/Char|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val g: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_671>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_671>|

                public constructor(): R|<local>/F_671|

            }

            local final class Scope1 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_671>|.char: R|kotlin/Char|
                    public get(): R|kotlin/Char|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/F_671>|.char: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Char>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Char>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_671>|.g: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_671>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_671>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/F_671>|.g: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/G_671>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/G_671>|

                public constructor(): R|<local>/Scope1|

            }

            local abstract class G_671 : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val double: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public constructor(): R|<local>/G_671|

            }

            local final class Scope2 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_671>|.int: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/G_671>|.int: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_671>|.double: R|kotlin/Double|
                    public get(): R|kotlin/Double|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/G_671>|.double: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double>|

                public constructor(): R|<local>/Scope2|

            }

            local abstract class Into_43 : R|<local>/Into_43I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public abstract var scope2: R|<local>/Scope2|
                    public get(): R|<local>/Scope2|
                    public set(value: R|<local>/Scope2|): R|kotlin/Unit|

                public abstract var scope1: R|<local>/Scope1|
                    public get(): R|<local>/Scope1|
                    public set(value: R|<local>/Scope1|): R|kotlin/Unit|

                public constructor(): R|<local>/Into_43|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/into|<R|<local>/Into_53|, R|kotlin/Any|>(String(f))
        }
        ).R|org/jetbrains/kotlinx/dataframe/api/first|<R|<local>/Into_43|>()
        lval df2: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_55>| = R|<local>/df|.R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_55>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/Record_55>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class Record_55I : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val row: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_811>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_811>|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public constructor(): R|<local>/Record_55I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_55I>|.row: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_811>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_811>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_55I>|.row: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Row_811>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/Row_811>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Record_55I>|.string: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Record_55I>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class Row_811 : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val string: R|kotlin/String?|
                    public get(): R|kotlin/String?|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val f: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_811>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_811>|

                public constructor(): R|<local>/Row_811|

            }

            local final class Scope1 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_811>|.string: R|kotlin/String?|
                    public get(): R|kotlin/String?|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Row_811>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String?>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String?>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Row_811>|.f: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_811>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_811>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/Row_811>|.f: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/F_811>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/F_811>|

                public constructor(): R|<local>/Scope1|

            }

            local abstract class F_811 : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val char: R|kotlin/Char?|
                    public get(): R|kotlin/Char?|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val g: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_811>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_811>|

                public constructor(): R|<local>/F_811|

            }

            local final class Scope2 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_811>|.char: R|kotlin/Char?|
                    public get(): R|kotlin/Char?|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/F_811>|.char: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Char?>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Char?>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_811>|.g: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_811>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_811>|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/F_811>|.g: R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/G_811>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/columns/ColumnGroup<<local>/G_811>|

                public constructor(): R|<local>/Scope2|

            }

            local abstract class G_811 : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val int: R|kotlin/Int?|
                    public get(): R|kotlin/Int?|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val double: R|kotlin/Double?|
                    public get(): R|kotlin/Double?|

                public constructor(): R|<local>/G_811|

            }

            local final class Scope3 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_811>|.int: R|kotlin/Int?|
                    public get(): R|kotlin/Int?|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/G_811>|.int: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int?>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int?>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_811>|.double: R|kotlin/Double?|
                    public get(): R|kotlin/Double?|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/G_811>|.double: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double?>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Double?>|

                public constructor(): R|<local>/Scope3|

            }

            local abstract class Record_55 : R|<local>/Record_55I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public abstract var scope3: R|<local>/Scope3|
                    public get(): R|<local>/Scope3|
                    public set(value: R|<local>/Scope3|): R|kotlin/Unit|

                public abstract var scope2: R|<local>/Scope2|
                    public get(): R|<local>/Scope2|
                    public set(value: R|<local>/Scope2|): R|kotlin/Unit|

                public abstract var scope1: R|<local>/Scope1|
                    public get(): R|<local>/Scope1|
                    public set(value: R|<local>/Scope1|): R|kotlin/Unit|

                public constructor(): R|<local>/Record_55|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/add|<R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_43>?|, R|Record|>(String(row), <L> = add@fun R|org/jetbrains/kotlinx/dataframe/api/AddDataRow<Record>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/AddDataRow<Record>|): R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_43>?| <inline=NoInline>  {
                ^ R|<local>/row|.R|kotlin/takeIf|<R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_43>|>(<L> = takeIf@fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/Into_43>|): R|kotlin/Boolean| <inline=Inline, kind=EXACTLY_ONCE>  {
                    ^ ==(this@R|special/anonymous|.R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/api/AddDataRow.index: R|kotlin/Int|>|().R|kotlin/Int.rem|(Int(2)), Int(0))
                }
                )
            }
            )
        }
        )
        R|kotlin/require|(==(R|/runtimeSchema|<R|<local>/G_811|>((this@R|/box|, (this@R|/box|, (this@R|/box|, R|<local>/df2|).R|<local>/Scope0.row|).R|<local>/Scope1.f|).R|<local>/Scope2.g|.R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/columns/ColumnGroup.get: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/G_811>|>|(Int(0))).R|/col|<R|kotlin/reflect/KProperty1<out kotlin/Any, *>|>(String(int)).R|SubstitutionOverride<kotlin/reflect/KProperty1.returnType: R|kotlin/reflect/KType|>|, R|kotlin/reflect/typeOf|<R|kotlin/Int?|>()))
        R|kotlin/require|(==(R|/runtimeSchema|<R|<local>/F_811|>((this@R|/box|, (this@R|/box|, R|<local>/df2|).R|<local>/Scope0.row|).R|<local>/Scope1.f|.R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/columns/ColumnGroup.get: R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/F_811>|>|(Int(0))).R|/col|<R|kotlin/reflect/KProperty1<out kotlin/Any, *>|>(String(char)).R|SubstitutionOverride<kotlin/reflect/KProperty1.returnType: R|kotlin/reflect/KType|>|, R|kotlin/reflect/typeOf|<R|kotlin/Char?|>()))
        ^box String(OK)
    }
FILE: __GENERATED DECLARATIONS__.kt
    public final val R|org/jetbrains/kotlinx/dataframe/DataRow<Record>|.string: R|kotlin/String|
        public get(): R|kotlin/String|
    public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<Record>|.string: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
        public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
