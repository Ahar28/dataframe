FILE: columnWithStarProjection.kt
    @R|org/jetbrains/kotlinx/dataframe/annotations/DataSchema|() public final data class Record : R|kotlin/Any|, R|org/jetbrains/kotlinx/dataframe/api/DataRowSchema| {
        public constructor(id: R|kotlin/String|, b: R|kotlin/Int|): R|Record| {
            super<R|kotlin/Any|>()
        }

        public final val id: R|kotlin/String| = R|<local>/id|
            public get(): R|kotlin/String|

        public final val b: R|kotlin/Int| = R|<local>/b|
            public get(): R|kotlin/Int|

        public final operator fun component1(): R|kotlin/String|

        public final operator fun component2(): R|kotlin/Int|

        public final fun copy(id: R|kotlin/String| = this@R|/Record|.R|/Record.id|, b: R|kotlin/Int| = this@R|/Record|.R|/Record.b|): R|Record|

    }
    public final data class NameValuePair<V> : R|kotlin/Any| {
        public constructor<V>(name: R|kotlin/String|, value: R|V|): R|NameValuePair<V>| {
            super<R|kotlin/Any|>()
        }

        public final val name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

        public final val value: R|V| = R|<local>/value|
            public get(): R|V|

        public final operator fun component1(): R|kotlin/String|

        public final operator fun component2(): R|V|

        public final fun copy(name: R|kotlin/String| = this@R|/NameValuePair|.R|/NameValuePair.name|, value: R|V| = this@R|/NameValuePair|.R|/NameValuePair.value|): R|NameValuePair<V>|

    }
    public final fun box(): R|kotlin/String| {
        lval df: R|org/jetbrains/kotlinx/dataframe/DataFrame<Record>| = R|org/jetbrains/kotlinx/dataframe/api/dataFrameOf|<R|Record|>(vararg(R|/Record.Record|(String(1), Int(1)), R|/Record.Record|(String(2), Int(123)), R|/Record.Record|(String(3), Int(321))))
        lval df1: R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/NameValuePair_86>| = R|<local>/df|.R|org/jetbrains/kotlinx/dataframe/api/first|<R|Record|>().R|org/jetbrains/kotlinx/dataframe/api/transpose|<R|Record|>().R|kotlin/let|<R|org/jetbrains/kotlinx/dataframe/DataFrame<org/jetbrains/kotlinx/dataframe/api/NameValuePair<*>>|, R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/NameValuePair_86>|>(<L> = fun <anonymous>(it: R|org/jetbrains/kotlinx/dataframe/DataFrame<org/jetbrains/kotlinx/dataframe/api/NameValuePair<*>>|): R|org/jetbrains/kotlinx/dataframe/DataFrame<<local>/NameValuePair_86>| <inline=Inline, kind=EXACTLY_ONCE>  {
            local abstract class NameValuePair_86I : R|kotlin/Any| {
                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(1)) public abstract val value: R|kotlin/Any|
                    public get(): R|kotlin/Any|

                @R|org/jetbrains/kotlinx/dataframe/annotations/Order|(order = Int(0)) public abstract val name: R|kotlin/String|
                    public get(): R|kotlin/String|

                public constructor(): R|<local>/NameValuePair_86I|

            }

            local final class Scope0 : R|kotlin/Any| {
                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/NameValuePair_86I>|.value: R|kotlin/Any|
                    public get(): R|kotlin/Any|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/NameValuePair_86I>|.value: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Any>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Any>|

                public final val R|org/jetbrains/kotlinx/dataframe/DataRow<<local>/NameValuePair_86I>|.name: R|kotlin/String|
                    public get(): R|kotlin/String|

                public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<<local>/NameValuePair_86I>|.name: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
                    public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|

                public constructor(): R|<local>/Scope0|

            }

            local abstract class NameValuePair_86 : R|<local>/NameValuePair_86I| {
                public abstract var scope0: R|<local>/Scope0|
                    public get(): R|<local>/Scope0|
                    public set(value: R|<local>/Scope0|): R|kotlin/Unit|

                public constructor(): R|<local>/NameValuePair_86|

            }

            ^ R|<local>/it|.R|org/jetbrains/kotlinx/dataframe/api/dropNulls|<R|org/jetbrains/kotlinx/dataframe/api/NameValuePair<*>|>(<L> = dropNulls@fun R|org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<org/jetbrains/kotlinx/dataframe/api/NameValuePair<*>>|.<anonymous>(it: R|@R|kotlin/ParameterName|(name = String(it))  org/jetbrains/kotlinx/dataframe/api/ColumnsSelectionDsl<org/jetbrains/kotlinx/dataframe/api/NameValuePair<*>>|): R|org/jetbrains/kotlinx/dataframe/columns/ColumnsResolver<*>| <inline=NoInline>  {
                ^ this@R|special/anonymous|.R|org/jetbrains/kotlinx/dataframe/api/value|
            }
            )
        }
        )
        lval v: R|kotlin/Any| = (this@R|/box|, R|<local>/df1|).R|<local>/Scope0.value|.R|SubstitutionOverride<org/jetbrains/kotlinx/dataframe/DataColumn.get: R|kotlin/Any|>|(Int(0))
        ^box String(OK)
    }
FILE: __GENERATED DECLARATIONS__.kt
    public final val R|org/jetbrains/kotlinx/dataframe/DataRow<Record>|.id: R|kotlin/String|
        public get(): R|kotlin/String|
    public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<Record>|.id: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
        public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/String>|
    public final val R|org/jetbrains/kotlinx/dataframe/DataRow<Record>|.b: R|kotlin/Int|
        public get(): R|kotlin/Int|
    public final val R|org/jetbrains/kotlinx/dataframe/ColumnsContainer<Record>|.b: R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
        public get(): R|org/jetbrains/kotlinx/dataframe/DataColumn<kotlin/Int>|
